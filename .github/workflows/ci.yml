name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
            experimental: true

    continue-on-error: ${{ matrix.experimental || false }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    # Linux-specific dependencies
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev pkg-config
        # For headless clipboard testing
        sudo apt-get install -y xvfb

    # macOS-specific dependencies
    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        # Install any macOS-specific dependencies if needed
        echo "No additional dependencies required for macOS"

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      env:
        # Disable clipboard operations in CI
        MICRODROP_TEST_DISABLE_CLIPBOARD: 1
        # Use virtual display on Linux
        DISPLAY: ':99'
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          xvfb-run -a cargo test --verbose
        else
          cargo test --verbose
        fi
      shell: bash

    - name: Run property tests
      env:
        MICRODROP_TEST_DISABLE_CLIPBOARD: 1
        DISPLAY: ':99'
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          xvfb-run -a cargo test --release property_tests
        else
          cargo test --release property_tests
        fi
      shell: bash

    - name: Run integration tests
      env:
        MICRODROP_TEST_DISABLE_CLIPBOARD: 1
        DISPLAY: ':99'
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          xvfb-run -a cargo test --test integration_tests
        else
          cargo test --test integration_tests
        fi
      shell: bash

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev pkg-config

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-benchmark-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --bench audio_processing 2>&1 | tee benchmark_results.txt

    - name: Store benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          benchmark_results.txt
          target/criterion/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev pkg-config xvfb

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage report
      env:
        MICRODROP_TEST_DISABLE_CLIPBOARD: 1
        DISPLAY: ':99'
      run: |
        xvfb-run -a cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false

  release-build:
    name: Release Build
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: '.exe'
          - os: macOS-latest
            target: x86_64-apple-darwin
            suffix: ''

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev pkg-config

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifact
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/microdrop${{ matrix.suffix }} artifacts/microdrop-${{ matrix.target }}${{ matrix.suffix }}

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: microdrop-${{ matrix.target }}
        path: artifacts/microdrop-${{ matrix.target }}${{ matrix.suffix }}